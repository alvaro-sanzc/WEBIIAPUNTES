-------------------------------------------------------------------------
2h PARTE PTRÁCTICA 6p

-> PROBLEMA 1 4p

APARTADO 1: en .env cambiar a /v2 y el puerto
APARTADO 2: routes/book.js -> Ver el .yml bookmin es un objeto que devuelve una array


book.js despues de .find poner .Project({title,author}
Para hacer petición mongoDB

APARTADO 3:
NO CÓDIGO - MODIFICAR EL ARCHIVO OPENAPI 
AÑADIR EL ATRIBUTO LINK EN CADA LIBRO CON LA URL COMPLETA DEL LIBRO

APARTADO 4:
EN BOOK.JS EN DELETE PONER LOS ERRORES QUE FALTAN SEGÚN EL OPENAPI EN ESTA RUTA - PONER ERROR 400

-> PROBLEMA 2 EN MONDONGO 2p
APARTADO 1: CORRECTA -> db.listingAndReviews.find({},{name:1,number_of_reviews:1}).sort({number_of_reviews}).limit(1)

APARTADO 2: .aggrefate([{$proyect: {count: {$size:"$amerities"}}}]).sort({count:-1})
---
APARTADO 3
------------------------------------------------- chtgpt mongosh --------------------
Apartado 1. En la colección listingAndReviews indique el/los nombre(s) del alojamiento con más reviews.

db.listingAndReviews.aggregate([
  { $sort: { number_of_reviews: -1 } },
  { $limit: 1 },
  { $project: { _id: 0, name: 1, number_of_reviews: 1 } }
]);

Apartado 2. En la colección listingAndReviews indique el/los nombre(s) del alojamiento con más amenities.
db.listingAndReviews.aggregate([
  { $project: { name: 1, numAmenities: { $size: "$amenities" } } },
  { $sort: { numAmenities: -1 } },
  { $limit: 1 }
]);

Apartado 3. En la colección listingAndReviews indique para cada tipo de property_type el número de alojamientos de ese tipo.
db.listingAndReviews.aggregate([
  { $group: { _id: "$property_type", total: { $sum: 1 } } },
  { $sort: { total: -1 } }
]);


Apartado 4. En la colección listingAndReviews indique el número de alojamientos que tienen 2, 3, 4 o 5 beds
db.listingAndReviews.aggregate([
  { $match: { beds: { $in: [2, 3, 4, 5] } } },
  { $group: { _id: "$beds", total: { $sum: 1 } } },
  { $sort: { _id: 1 } }
]);

----------------------------------------------
1h - PARTE PRÁCTICA

1- TODO MENOS FECHAS
openapi
fechsa le da igual
graphql
arquitectura
soap
los w

2- PRÁCTICA, NO TEORÍA
3- REST (ENTERO)
ESTADO, HETOAS IMPORTANTE
SERVICIOS RESTFUL
Desde restful bla bla bla
YAML
4-
OPENAPI - ventajas e inconvenientes
webhooks
Escalando API
5- TODO HASTA 24 INCLUIDA MONGODB
BSON
6-XML - PUEDE CAER
EJ BIEN FORMATEADO, CUANDO ES VÁLIDO
DTD EJS IMPORTANTES, XPATH
Ruta de xpath para conseguir ese elemento
XPATH
XSD
XQUERY - POR ENCIMA

7 - MICROSERVICIOS - ENTERO TEÓRICO ENTERO HASTA LA DE REFERENCIAS.


ALGUNA PREGUNTA DE LOS TALLERES ENTRARÁ
TALLERES - ANGULAR NADA, 
AUTOMATIZACIÓN Y ESPECIALIZACIÓN - QOA,Dice que todo
IaC - Ventajas Desventajas, CI/CD
AWS - TODO

